/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params{
    
    inputdir = "$projectDir/data"
    outputdir = "$projectDir/results"

    qc_only = false
    gvcf_only = false

    trim_adapter = "$projectDir/refs/adapters/NexteraPE-custom.fa"   
    genomes_dir = "$projectDir/refs/genomes" 
    sif_path = "$projectDir/conf/nf-wgs-dsl2.sif"

}

// contains resource configurations
includeConfig 'conf/base.config'

// Uncomment if adding a site profile
// try {
//     includeConfig "${params.custom_config_base}/custom.config"
// } catch (Exception e) {
//     System.err.println("WARNING: Could not load custom config profile: ${params.custom_config_base}/custom.config")
// }

profiles {
    conda {
        conda.enabled = true
        docker.enabled = false
        apptainer.enabled = false
        process.conda = "../conf/envs/env.yml"
    }
    mamba {
        conda.enabled       = true
        conda.useMamba      = true
        docker.enabled      = false
        apptainer.enabled   = false
    }
    docker {
        conda.enabled           = false
        docker.enabled          = true
        docker.userEmulation    = true
        apptainer.enabled       = false
        process.container       = "finterly/nf-wgs-dsl2:latest"
    }
    apptainer {
        conda.enabled           = false
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        docker.enabled          = false
        process.container       = "file://${params.sif_path}"
    }
    sge {
        process {
            executor        = "sge"
            scratch         = true
            stageInMode     = "copy"
            stageOutMode    = "move"
            errorStrategy   = "retry"
            clusterOptions  = '-S /bin/bash -o job.log -e job.err'
        }
        executor {
            queueSize = 50
        }
    }
}

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

timeline {
    enabled = true
    file = "${params.outputdir}/execution_timeline.html"
    overwrite = true
}
report {
    enabled = true
    file = "${params.outputdir}/execution_report.html"
    overwrite = true
}
trace {
    enabled = true
    file = "${params.outputdir}/execution_trace.txt"
    overwrite = true
}

// dag {
//     enabled = true
//     file = "${params.outputdir}/pipeline_dag.svg"
//     overwrite = true
// }

manifest {
    name            = 'finterly/nf-wgs-dsl2'
    homePage        = 'https://github.com/finterly/nf-wgs-dsl2'
    description     = 'wgs pipeline'
    version         = '0.0.1'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
