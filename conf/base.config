/*
 * -------------------------------------------------
 *    Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

params {
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory      = 120.GB        // 60 to 120  
    max_cpus        = 12           // 12  
    max_time        = '48.h'       
}

process {

    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries = 2
    maxErrors = '-1'

    shell = ['/bin/bash', '-euo', 'pipefail']
    penv = 'smp'

    // Process-specific resource requirements (others leave at default)
 
    // QC 
    withName:trim_reads {
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        time = { check_max( 4.h * task.attempt, 'time') }    
    }
    withName:bwa_align {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time') }    
    }
    withName:sam_convert {
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    }    
    withName:sam_clean {
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    } 
    withName:sam_sort {
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    } 
    withName:sam_duplicates {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) } 
        time = { check_max( 8.h * task.attempt, 'time') }    
    } 
    withName:insert_sizes {
        memory = { check_max( 8.GB * task.attempt, 'memory' ) } 
    } 
    withName:pf_read_depth {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time') }     
    } 

    // GVCF
    withName:g_variant_calling {
        cpus = { check_max( 6 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time') }    
    }
}
